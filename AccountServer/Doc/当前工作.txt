// 帐号服务器，当前工作
// 仙剑修，2001.11.12


CMsgAccount:
		分析接收到的消息，并返回一个CMsgConnect消息。
		返回消息分为成功：玩家ID；失败：空ID。
		数据结构：
			STR		szAccount；
			STR		szPassword；
			STR		szServer。（szServer在用于帐号服务器->游戏服务器时为客户端IP）


CMsgConnect:
		分析接收到的消息，并返回该帐号的所有玩家角色CMsgRole。
		数据结构：
			OBJID	idAccount；
			DWORD	dwData；
			STR		szInfo。

原来的协议：
	。帐号
		上传：帐户名，口令，游戏服务器IP。CMsgAccount
		下传：帐号ID，认证ID，STR。CMsgConnect
	。连接
		上传：帐号ID，认证ID，STR。CMsgConnect
		下传多个：角色消息。CMsgRole
		下传：登录成功。CMsgLogin

/////////////////////////////////////////////////////////////////////////////

==============================================================================================
/*作废	2、计点协议：
		。上传消息
			计点：
				。开始计点：帐号ID，开始计点时间。（当前角色ID和开始计点时间存入玩家在线表）
1、不跳消息				。正常计点：帐号ID，开始计点时间，LAST计点时间。（定时上传该消息）
				。结束计点：帐号ID，开始计点时间，结束计点时间，
						结束类型（超时未登录，客户端退出，游戏服务器踢人，帐号服务器踢人）。（玩家退出时上传该消息）
			刷新：
				。正常计点：帐号ID，开始计点时间，LAST计点时间。（当收到“刷新计点”消息时立即上传该消息）
				。玩家登录中：帐号ID，认证ID，客户端IP。
				。无此玩家在线：帐号ID，开始计点时间（复制于下传消息）。（当帐号服务器要求“刷新计点”时）
			查询：
				。剩余点数：帐号ID。
			全同步：
				。上传全部玩家表：玩家计。。。

		。下传消息
2、心跳			。刷新计点：帐号ID，开始计点时间。（强制游戏服务器立即上传LAST计点时间，如超时不上传，将通知游戏服务器踢人）
			。刷新登录：帐号ID，认证ID，客户端IP。(强制游戏服务器立即上传“玩家登录中”消息，如超时不上传，将通知游戏服务器踢人)
			。踢人：帐号ID，原因TYPE（无此角色，计点制已耗尽，包时制已到时，游戏服务器响应超时，帐号数据库异常，同步异常）。
			。剩余点数：帐号ID，计点类型（计点制，包时制，计帐制），(点数 | 时间)。
3、再同步			。刷新全部状态：可重连时自动上传(要求该游戏服务器上传“玩家计点表”，用于断线重连时恢复“玩家在线表”。
						“玩家在线表”中的口令和计点类型需要重新从帐号数据库取出)

		。异常：当客户端登录帐号服务器后，帐号服务器重启。客户端登录游戏服务器会失败。
*/

==============================================================================================

游戏服务器通讯底层：
	1.增加一个帐号线程。
	2.增加一个帐号SOCKET。
	3.帐号线程使用类封装，做成管程类。线程消息通讯使用类SOCKET的异步缓冲机制(非阻塞)。
	4.需要增加CAccountSocket类，->OnCreate()、->OnDestroy()、<-Destroy()、->OnProcessMsg()、<-SendMsg()。
	5.创建线程时，需要游戏服务器版本号、帐号服务器地址IP+PORT、自己的帐号名和口令。


==============================================================================================
未完成任务：
	//。帐号服务器中：动态更新游戏服务器列表
	//。LOGINTHREAD类中增加“锁定IP表”。
	//。ISP自动增加帐号产生的垃圾帐号如何处理。
	//。缺几个日志文件
	//。将SERVERSOCKET[]改为指针数组的指针。以便于将两部分的加密密码分开。(将加密类改为模板来解决)
	//。将ENCRYPT类改为模板，以适应不同的密码。
	//。修改游戏服务器，增加统计SEND时间.
	//。再次登录要求登录到另一台游戏服务器的问题。(不能同时登录)
	//。当游戏服务器重连接后，因为没有服务器名，所以该帐号可以得连接上来。BUG：一个帐号两个连接。
	。可增加多个登录前台，用硬件来动态IP定向到前台。
	。当锁定并析构成员对象后，成员函数可能会通过别一线程对成员对象进行操作，进而引起共享冲突。
	。轮询版浪费太多，有必要改为事件版。
	。将SOCKET类改为0-COPY的。
	。帐号服务器中的THREADBASE类已经修改，游戏服务器中的THREADBASE类需要同步修改。
	。三方协议锁住玩家无法再次上线的问题。
	。游戏服务器SOCKET不自动断线(阻塞时丢弃)
	。死锁监视线程，用于监视其它线程的活动状态，并重新启动。
	。游戏服务器界面分析超时数量？
	。将游戏服务器上传计费点的SEND增加一个消息大小的BUF，以便在溢出时阻塞住消息通道，将计点数累计在变量中。
	★发现BUG(未解决)：当帐号服务器重新启动时，由于未同步，所以玩家可同时登录到多个服务器。
	。同时登录两个角色时(如果不同的组允许同时登录)，那在线表必须做成MULTIMAP
	。在线表的算法优化(已设计，但还未起用)
	。记录最后5个IP，5个内不允许相同IP连续登录。5个内记录一次ERROR进入BAN表。
	。大量连接的攻击，应防止大量连接而不通讯。应将超时的IP加入BAN表。可能需要修改BAN表类。

	。清除在线表中的超时，改为表满时再清，以提高效率。同时应该在“自动转”的地方检查是否超时。
	。在线表中添加垃圾回收，以便快速找到空闲单元。
	。优化对抗“大量连接攻击”算法，以便将IP加入BAN表。
	。减少数据库读取，优化加速
	。补登消息应再延时发送，以等待游戏服务器“登录”成功。

未完成：
	。增加：服务器登录流量控制。可有效解决登录浪涌对服务器造成的无效登录。
	。增加消息校验和
	。修改：不重复发KICKOUT消息。






